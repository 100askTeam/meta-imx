Freescale's 3.14.52-1.1.1_patch Yocto Project BSP
================================================

This BSP is a Freescale release providing support for the following processors

The following boards were not tested in this release but this release contains updates
that might affect these boards.

   * Freescale i.MX 6QuadPlus SABRE Device (imx6qpsabresd)
   * Freescale i.MX 6QuadPlus SABRE Auto (imx6qpsabreauto)
   * Freescale i.MX 6UltraLite EVK (imx6ulevk)
   * Freescale i.MX 7Dual SABRE Smart Device (imx7dsabresd)
   * Freescale i.MX 6SoloX SABRE Smart Device (imx6sxsabresd)
   * Freescale i.MX 6SoloX SABRE Auto (imx6sxsabreauto)
   * Freescale i.MX 6Quad SABRE Smart Device (imx6qsabresd)
   * Freescale i.MX 6Quad SABRE Auto (imx6qsabreauto)
   * Freescale i.MX 6DualLite SABRE Smart Device (imx6dlsabresd)
   * Freescale i.MX 6DualLite SABRE Auto (imx6dlsabreauto)
   * Freescale i.MX 6SoloLite EVK (imx6slevk)
   * Freescale i.MX 6SoloX SABRE Smart Device (imx6sxsabresd)
   * Freescale i.MX 6SoloX SABRE Auto (imx6sxsabreauto)
   * Freescale i.MX 6SOLO SABRE Smart Device (imx6solosabresd )
   * Freescale i.MX 6SOLO SABRE Auto (imx6solosabreauto )

 * i.MX Device Tree configurations for each machine
    Each machine files lists the associated device trees for that machine.

 * i.MX U-Boot configurations for each machine
    imx6qpsabresd - sd, sata
    imx6qpsabreauto - sd, eim-nor, nand, spi-nor, sata
    imx7dsabresd - sd, qspi1, nand, epdc
    imx6ulevk - sd, qspi1
    imx6sxsabresd - sd, qspi2, m4fastup, emmc
    imx6sxsabreauto - sd, qspi1, nand
    imx6qsabresd - sd, sata
    imx6qsabreauto - sd, eim-nor, spi-nor, nand, sata
    imx6dlsabresd - sd, epdc
    imx6dlsabreauto - sd, eim-nor, spi-nor, nand
    imx6solosabresd - sd
    imx6solosabreauto - sd, eim-nor, spi-nor, nand
    imx6slevk - sd, spi-nor, epdc


Quick Start Guide
-----------------
See the Freescale Yocto Project User's Guide for instructions on installing repo.

First install the i.MX Freescale BSP repo
$: repo init -u git://git.freescale.com/imx/fsl-arm-yocto-bsp.git -b imx-3.14.52-1.1.1_patch

Download the Yocto Freescale Layers:
$: repo sync

Run i.MX Freescale Yocto Project Setup:
$: MACHINE=< machine name> source fsl-setup-release.sh -b <build directory> -e <backend fb, dfb, wayland, x11>

After this your system will be configured to start a Yocto Project build.

Build images
---------------------
Each graphical backend X11, Frame buffer and Wayland must be in a separate build 
directory, so the setup script above must be run for each backend to configure the build 
correctly. In this release two image recipes are provided that work on almost all backends.

DISTROs are new and the way to configure for any backends.  Use DISTRO= instead of the -e on the setup script.
The -e parameter gets converted to the appropriate distro configuration.

Note: DirectFB is no longer supported in i.MX graphic bilds.

   fsl-image-gui provides a gui image without QT.
   fsl-image-qt5 provides a Qt5 image

Here are some examples:

Building X11
------------
  DISTRO=fsl-imx-x11 MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-x11
  bitbake fsl-image-gui
or
  bitbake fsl-image-qt5

To run the QT5 examples use the following parameters:
<QT5 example> -platform xcb -plugin evdevtouch:/dev/input/event0

Building Frame Buffer (FB)
---------------------------
  DISTRO=fsl-imx-fb MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-fb
  bitbake fsl-image-gui
or
  bitbake fsl-image-qt5

To run the QT5 examples use the following parameters:
<QT5 Example> -platform eglfs -plugin evdevtouch:/dev/input/event0

Building XWayland
---------------------------
  DISTRO=fsl-imx-xwayland MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-xwayland
  bitbake fsl-image-gui
or
  bitbake fsl-image-qt5

To run the QT5 examples use the following parameters:
<QT5 example> platform wayland-egl -plugin evdevtouch:/dev/input/event0 --fullscreen

Building Wayland-Weston (wayland)
---------------------------
  DISTRO=fsl-imx-wayland MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-wayland
  bitbake fsl-image-gui
or
  bitbake fsl-image-qt5

To run the QT5 examples use the following parameters:
<QT5 example> platform wayland-egl -plugin evdevtouch:/dev/input/event0 --fullscreen

Hardware Floating Point
-----------------------
This release enables hardware floating point by default.  This feature is enabled in both the machine 
configurations and in the distros. (Some machine files exist in the community meta-fsl-arm without this setting.)
DEFAULTTUNE_mx6 = "cortexa9hf-neon"

This release was only tested for hardware floating point.

To build with software floating point, use DISTRO=fsl-imx-sfp-mx6 which sets the DEFAULTTUNE setting to "cortexa9-neon"
Note:  This release is the LAST release providing software floating point binaries.

Restricted Codecs
-----------------
These codecs have contractual restrictions that require separate distribution.

The Manufacturing Tool - MFGTool
--------------------------------
In this release MFGTool uses the community setup.  
To build MFGTool, build the following:

   bitbake fsl-image-mfgtool-initramfs

End User License Agreement
--------------------------
During the Freescale Yocto Community BSP setup-environment process, the Freescale i.MX End User License Agreement (EULA) 
is displayed. To continue, users must agree to the conditions of this license. The agreement to the terms allows the 
Yocto build to untar packages from the Freescale mirror. Please read this license agreement carefully during the 
setup process because, once accepted, all further work in the Yocto environment is tied to this accepted agreement.

Chromium
---------
The Chromium browser requires additional layers added in the fsl-release-setup.sh script.   
To enable chromium requires the following steps:

In local.conf 
- Add chromium into your install list:
CORE_IMAGE_EXTRA_INSTALL += "chromium libexif"

- Add commercial into the white list:
LICENSE_FLAGS_WHITELIST="commercial"

QTWebkit
--------
To start go to /usr/share/qt5/examples/webkitwidgets/browser and run browser

Qt
--
Note that Qt has both a commercial and open source license options.  Make the decision about which license
to use before starting work on custom Qt applications.  Once custom Qt applications are started with an open source
Qt license the work can not be used with a commercial Qt license.  Work with a legal representative to understand
the differences between each license.   Default builds use an open source Qt license.

Note Qt is not supported on i.MX 6UltraLite and i.MX 7Dual. It works on X11 backend only but is not a supported feature.
