Freescale's 3.10.31-1.1.0 Alpha Yocto BSP
==================================

This BSP is a Freescale release providing support for the following processors

   * Freescale i.MXSX SABRE Smart Device (imx6sxsabresd)
   * Freescale i.MXSX 17x17 arm2 (imx6sx17x17arm2)
   * Freescale i.MXSX 19x19 ddr3 arm2 (imx6sx19x19ddr3arm2)
   * Freescale i.MXSX 19x19 lpddr arm2 (imx6sx19x19lpddrarm2)

   * Freescale i.MX6Q SABRE Smart Device (imx6qsabresd)
   * Freescale i.MX6Q SABRE Auto (imx6qsabreauto)
   * Freescale i.MX6DL SABRE Smart Device (imx6dlsabresd)
   * Freescale i.MX6DL SABRE Auto (imx6dlsabreauto)
   * Freescale i.MX6SOLO SABRE Smart Device(imx6solosabresd )
   * Freescale i.MX6SOLO SABRE Auto (imx6solosabreauto )
   * Freescale i.MX6 Solo Lite EVK (imx6slevk)

 * i.MX6 Device Tree configurations for each machine
    imx6sxsabresd - imx6sx-sdb.dtb imx6sx-sdb-emmc.dtb imx6sx-sdb-m4.dtb
    imx6sx17x17arm2 - imx6sx-17x17-arm2.dtb imx6sx-17x17-arm2-mlb.dtb imx6sx-17x17-arm2-sai.dtb imx6sx-17x17-arm2-spdif.dtb imx6sx-17x17-arm2-ssi.dtb
    imx6sx19x19ddr3arm2 - imx6sx-19x19-arm2.dtb imx6sx-19x19-arm2-lcdif1.dtb imx6sx-19x19-arm2-sai.dtb
    imx6sx19x19lpddr2arm2 - imx6sx-19x19-arm2.dtb imx6sx-19x19-arm2-lcdif1.dtb imx6sx-19x19-arm2-sai.dtb

    imx6qsabresd - imx6q-sabresd.dtb imx6q-sabresd-ldo.dtb imx6q-sabresd-hdcp.dtb
    imx6qsabreauto - imx6q-sabreauto.dtb imx6q-sabreauto-gpmi-weim.dtb imx6q-sabreauto-ecspi.dtb
    imx6dlsabresd - imx6dl-sabresd.dtb imx6dl-sabresd-ldo.dtb imx6dl-sabresd-hdcp.dtb
    imx6dlsabreauto - imx6dl-sabreauto.dtb imx6dl-sabreauto-gpmi-weim.dtb imx6dl-sabreauto-ecspi.dtb
    imx6solosabresd -imx6dl-sabresd.dtb imx6dl-sabresd-ldo.dtb
    imx6solosabreauto - imx6dl-sabreauto.dtb
    imx6slevk - imx6sl-evk.dtb imx6sl-evk-csi.dtb imx6sl-evk-ldo.dtb

 * i.MX6 Uboot configurations for each machine
    imx6sxsabresd - sd, qspi2, m4fastup
    imx6sx17x17arm2 - sd, qspi2, spinor, nand
    imx6sx19x19ddr3arm2 - sd, qspi2, eimnor
    imx6sx19x19lpddr2arm2 - sd, qspi2
 
    imx6qsabresd - sd, sata
    imx6qsabreauto - sd, eimnor, spinor, nand, sata
    imx6dlsabresd - sd
    imx6dlsabreauto - sd, eimnor, spinor, nand
    imx6solosabresd - sd
    imx6solosabreauto - sd, eimnor, spinor, snand
    imx6slevk - sd, spinor

Quick Start Guide
-----------------
First install the i.MX Freescale BSP repo
$: repo init -u git://git.freescale.com/imx/fsl-arm-yocto-bsp.git -b imx-3.10.31-1.1.0_alpha

Download the Yocto Freescale Layers
$: repo sync

Run i.MX Freescale Yocto Project Setup
$: MACHINE=< machine name> source fsl-setup-release.sh -b <build directory> -e <backend fb, dfb, wayland, x11>

After this your system will be configured to start a Yocto Project build.

Build images
---------------------
Each graphical backend X11, Frame buffer, DirectFB and Wayland must be in a separate build directory.
So the setup script above must be run for each backend to configure the build correctly.
In the 3.10.31-1.1.0_alpha release two new image recipes are provided that work on all backends.

   fsl-image-gui provides a gui image without QT.
   fsl-image-qt5 provides a Qt5 image for X11, FB and Wayland backends.

Here are examples

Building X11
------------
  MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-x11 -e x11
  bitbake fsl-image-gui
or
  bitbake fsl-image-qt5

Note for running QT5 examples use the following parameters
<QT5 example> -platform xcb -plugin evdevtouch:/dev/input/event0

Building Frame Buffer (FB)
---------------------------
  MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-fb -e fb
  bitbake fsl-image-gui
or
  bitbake fsl-image-qt5

Note for running QT5 examples use the following parameters
<QT5 Example> -platform eglfs -plugin evdevtouch:/dev/input/event0

Building Direct FB (DFB)
---------------------------
  MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-dfb -e dfb
  bitbake fsl-image-gui

Direct FB does not support QT5 for this release

Building Wayland-Weston (wayland)
---------------------------
  MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-wayland -e wayland
  bitbake fsl-image-gui
or
  bitbake fsl-image-qt5

Note for running QT5 examples use the following parameters
<QT5 example> platform wayland-egl -plugin evdevtouch:/dev/input/event0 --fullscreen

Hardware Floating Point
-----------------------
This release enables hardware floating point.  This feature is enabled in both the machine 
configurations and in the layer.conf (because some machine files exist in community meta-fsl-arm.
DEFAULTTUNE_mx6 = "cortexa9hf-neon

To build as softare floating point add the following to local.conf
DEFAULTTUNE_mx6 = "cortexa9-neon"

Note we also provide some binaries with a software floating point version which we switch basis on FP_TAG in layer.conf.
This release was only tested for hardware floating point.

Restricted Codecs
-----------------
Some codecs have recipes in the layer but binaries are not provided in the Yocto fetch system (microsoft, ac3 and aacp)
These codecs have contractual restrictions that require separate distribution.

Manufacturing Tool
------------------
The manufacturing recipes have changed since 3.10.17-1.0.0_GA.  In this release the mfgtools is using the community
setup.  To build for mfgtools build the following components

   bitbake linux-imx-mfgtool
   bitbake u-boot-imx-mfgtool

End User License Agreement
--------------------------
During the Freescale Yocto Community BSP setup-environment process, the Freescale i.MX End User License Agreement (EULA) 
is displayed. To continue, users must agree to the conditions of this license. The agreement to the terms allows the 
Yocto build to untar packages from the Freescale mirror. Please read this license agreement carefully during the 
setup process because, once accepted, all further work in the Yocto environment is tied to this accepted agreement.

Chromium
---------
The Chromium browser requires additional layers added in the fsl-release-setup.sh script.   
To enable chromium requires the following steps

In local.conf 
- Add in chromium into your list
CORE_IMAGE_EXTRA_INSTALL += "chromium"

- Add the commercial white list into local.conf. 
LICENSE_FLAGS_WHITELIST="commercial"

QTWebkit
--------
To start go to /usr/share/qt5/examples/webkitwidgets/browser and run browser
