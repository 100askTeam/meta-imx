Index: chromium-74.0.3729.131/ui/ozone/platform/wayland/BUILD.gn
===================================================================
--- chromium-74.0.3729.131.orig/ui/ozone/platform/wayland/BUILD.gn
+++ chromium-74.0.3729.131/ui/ozone/platform/wayland/BUILD.gn
@@ -228,7 +228,9 @@ source_set("test_support") {
 source_set("wayland_unittests") {
   testonly = true
 
-  assert(use_wayland_gbm)
+  if (use_wayland_gbm) {
+    assert(use_wayland_gbm)
+  }
 
   sources = [
     "gpu/wayland_surface_factory_unittest.cc",
@@ -261,9 +263,12 @@ source_set("wayland_unittests") {
     "//ui/events/ozone:events_ozone_layout",
     "//ui/ozone:platform",
     "//ui/ozone:test_support",
-    "//ui/ozone/common/linux:gbm",
   ]
 
+  if (use_wayland_gbm) {
+    deps += [ "//ui/ozone/common/linux:gbm" ]
+  }
+
   import("//ui/base/ui_features.gni")
   if (use_xkbcommon) {
     deps += [ "//ui/events/keycodes:xkb" ]
@@ -271,8 +276,11 @@ source_set("wayland_unittests") {
 
   defines = [
     "WL_HIDE_DEPRECATED",
-    "WAYLAND_GBM",
   ]
+
+  if (use_wayland_gbm) {
+    defines += [ "WAYLAND_GBM" ]
+  }
 }
 
 fuzzer_test("wayland_buffer_fuzzer") {
Index: chromium-74.0.3729.131/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
===================================================================
--- chromium-74.0.3729.131.orig/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
+++ chromium-74.0.3729.131/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
@@ -11,8 +11,10 @@
 #include "mojo/public/cpp/bindings/associated_interface_ptr.h"
 #include "third_party/khronos/EGL/egl.h"
 #include "ui/ozone/common/linux/drm_util_linux.h"
+#if defined(WAYLAND_GBM)
 #include "ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.h"
 #include "ui/ozone/platform/wayland/gpu/wayland_surface_factory.h"
+#endif
 #include "ui/ozone/platform/wayland/host/wayland_connection.h"
 
 namespace ui {
@@ -46,12 +48,14 @@ void WaylandConnectionProxy::OnSubmissio
                                           gfx::SwapResult swap_result) {
   DCHECK(gpu_thread_runner_->BelongsToCurrentThread());
   DCHECK_NE(widget, gfx::kNullAcceleratedWidget);
+#if defined(WAYLAND_GBM)
   auto* surface = factory_->GetSurface(widget);
   // There can be a race between destruction and submitting the last frames. The
   // surface can be destroyed by the time the host receives a request to destroy
   // a buffer, and is able to call the OnSubmission for that specific buffer.
   if (surface)
     surface->OnSubmission(buffer_id, swap_result);
+#endif
 }
 
 void WaylandConnectionProxy::OnPresentation(
@@ -60,12 +64,14 @@ void WaylandConnectionProxy::OnPresentat
     const gfx::PresentationFeedback& feedback) {
   DCHECK(gpu_thread_runner_->BelongsToCurrentThread());
   DCHECK_NE(widget, gfx::kNullAcceleratedWidget);
+#if defined(WAYLAND_GBM)
   auto* surface = factory_->GetSurface(widget);
   // There can be a race between destruction and presenting the last frames. The
   // surface can be destroyed by the time the host receives a request to destroy
   // a buffer, and is able to call the OnPresentation for that specific buffer.
   if (surface)
     surface->OnPresentation(buffer_id, feedback);
+#endif
 }
 
 void WaylandConnectionProxy::CreateZwpLinuxDmabuf(
