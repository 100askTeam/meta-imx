From 1c15d1a5ca2f1b25e80fd60e46a53c68deef2fb0 Mon Sep 17 00:00:00 2001
From: Haihua Hu <jared.hu@nxp.com>
Date: Thu, 2 Nov 2017 14:56:44 +0800
Subject: [PATCH] Add HDR10 support in kmssink

Upstream-Status: Inappropriate [i.MX specific]
---
 sys/kms/gstkmssink.c  | 37 +++++++++++++++++++++++++++++++++++++
 sys/kms/gstkmsutils.c |  3 +++
 2 files changed, 40 insertions(+)

diff --git a/sys/kms/gstkmssink.c b/sys/kms/gstkmssink.c
index d19e19e..af02677 100644
--- a/sys/kms/gstkmssink.c
+++ b/sys/kms/gstkmssink.c
@@ -57,6 +57,8 @@
 #include "gstkmsbufferpool.h"
 #include "gstkmsallocator.h"
 
+#include <gst/video/gstvideohdr10meta.h>
+
 #define GST_PLUGIN_NAME "kmssink"
 #define GST_PLUGIN_DESC "Video sink using the Linux kernel mode setting API"
 
@@ -473,6 +475,15 @@ ensure_allowed_caps (GstKMSSink * self, drmModeConnector * conn,
 
       tmp_caps = gst_caps_merge (tmp_caps, caps);
     }
+    /* FIXME: Add NV12_10LE caps here, no need this code
+     * when new drm fourcc added*/
+    caps = gst_caps_new_simple ("video/x-raw",
+        "format", G_TYPE_STRING, "NV12_10LE",
+        "width", GST_TYPE_INT_RANGE, res->min_width, res->max_width,
+        "height", GST_TYPE_INT_RANGE, res->min_height, res->max_height,
+        "framerate", GST_TYPE_FRACTION_RANGE, 0, 1, G_MAXINT, 1, NULL);
+
+    tmp_caps = gst_caps_merge (tmp_caps, caps);
 
     out_caps = gst_caps_merge (out_caps, gst_caps_simplify (tmp_caps));
   }
@@ -1214,6 +1225,30 @@ error_map_src_buffer:
   }
 }
 
+void
+dump_hdr10meta (GstKMSSink *self, GstBuffer * buf)
+{
+
+  GstVideoHdr10Meta *meta = NULL;
+  meta = gst_buffer_get_video_hdr10_meta (buf);
+  if (meta){
+    /* TODO: just dump temporarily, to do configure to drm driver for hdr10 in future */
+    GST_INFO_OBJECT (self, "redPrimary x=%d y=%d", meta->hdr10meta.redPrimary[0], meta->hdr10meta.redPrimary[1]);
+    GST_INFO_OBJECT (self, "greenPrimary x=%d y=%d", meta->hdr10meta.greenPrimary[0], meta->hdr10meta.greenPrimary[1]);
+    GST_INFO_OBJECT (self, "bluePrimary x=%d y=%d", meta->hdr10meta.bluePrimary[0], meta->hdr10meta.bluePrimary[1]);
+    GST_INFO_OBJECT (self, "whitePoint x=%d y=%d", meta->hdr10meta.whitePoint[0], meta->hdr10meta.whitePoint[1]);
+    GST_INFO_OBJECT (self, "maxMasteringLuminance %d", meta->hdr10meta.maxMasteringLuminance);
+    GST_INFO_OBJECT (self, "minMasteringLuminance %d", meta->hdr10meta.minMasteringLuminance);
+    GST_INFO_OBJECT (self, "maxContentLightLevel %d", meta->hdr10meta.maxContentLightLevel);
+    GST_INFO_OBJECT (self, "maxFrameAverageLightLevel %d", meta->hdr10meta.maxFrameAverageLightLevel);
+    GST_INFO_OBJECT (self, "transferCharacteristics %d", meta->hdr10meta.transferCharacteristics);
+    GST_INFO_OBJECT (self, "colourPrimaries %d", meta->hdr10meta.colourPrimaries);
+    GST_INFO_OBJECT (self, "matrixCoeffs %d", meta->hdr10meta.matrixCoeffs);
+    GST_INFO_OBJECT (self, "chromaSampleLocTypeTopField %d", meta->hdr10meta.chromaSampleLocTypeTopField);
+    GST_INFO_OBJECT (self, "chromaSampleLocTypeBottomField %d", meta->hdr10meta.chromaSampleLocTypeBottomField);
+  }
+}
+
 static GstFlowReturn
 gst_kms_sink_show_frame (GstVideoSink * vsink, GstBuffer * buf)
 {
@@ -1227,6 +1262,8 @@ gst_kms_sink_show_frame (GstVideoSink * vsink, GstBuffer * buf)
   GstVideoRectangle result;
   GstFlowReturn res;
 
+  dump_hdr10meta (GST_KMS_SINK (vsink), buf);
+
   self = GST_KMS_SINK (vsink);
 
   res = GST_FLOW_ERROR;
diff --git a/sys/kms/gstkmsutils.c b/sys/kms/gstkmsutils.c
index 838cddd..4be7137 100644
--- a/sys/kms/gstkmsutils.c
+++ b/sys/kms/gstkmsutils.c
@@ -60,6 +60,9 @@ static const struct
   DEF_FMT (YVU420, YV12),
   DEF_FMT (YUV422, Y42B),
   DEF_FMT (NV12, NV12),
+  /* FIXME: just hack for debug usage, need 
+   * drm driver owner add 10bit fourcc format */
+  DEF_FMT (NV12, NV12_10LE),
   DEF_FMT (NV21, NV21),
   DEF_FMT (NV16, NV16),
 
-- 
1.9.1

