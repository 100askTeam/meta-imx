From ef2a8be179ccf72b579641295b5db88322beae85 Mon Sep 17 00:00:00 2001
From: Haihua Hu <jared.hu@nxp.com>
Date: Mon, 25 Apr 2016 12:53:12 +0800
Subject: [PATCH 6/6] [MMFMWK-7135][glplugin] glcolorconvert: fix fragment
 shader compile error when using OpenGL ES 3.1

1. Add shader function texture2D -> texture mangle
2. Modify RGB->Planer YUV shader, not use varible "sample", it is reserved
keyword which will result in a compile error.
3. Fix build error for gl->BindFragDataLocation, it was implemented from
commit d38587c1 on master by Matthew Water

Upstream-Status: Pending

bugzilla URL: https://bugzilla.gnome.org/show_bug.cgi?id=765517


Signed-off-by: Haihua Hu <jared.hu@nxp.com>
---
 gst-libs/gst/gl/glprototypes/shaders.h | 10 ++++++++++
 gst-libs/gst/gl/gstglcolorconvert.c    | 20 +++++++++++++++++---
 gst-libs/gst/gl/gstglshader.c          | 20 ++++++++++++++++++++
 3 files changed, 47 insertions(+), 3 deletions(-)

diff --git a/gst-libs/gst/gl/glprototypes/shaders.h b/gst-libs/gst/gl/glprototypes/shaders.h
index 817e479..6d828db 100644
--- a/gst-libs/gst/gl/glprototypes/shaders.h
+++ b/gst-libs/gst/gl/glprototypes/shaders.h
@@ -362,3 +362,13 @@ GST_GL_EXT_FUNCTION (void, UniformMatrix3x4fv,
 GST_GL_EXT_FUNCTION (void, UniformMatrix4x3fv,
                      (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
 GST_GL_EXT_END ()
+
+GST_GL_EXT_BEGIN (bind_frag_data,
+                  GST_GL_API_OPENGL | GST_GL_API_OPENGL3,
+                  3, 0,
+                  255, 255,
+                  "\0",
+                  "\0")
+GST_GL_EXT_FUNCTION (void, BindFragDataLocation,
+                     (GLuint program, GLuint index, const GLchar * name))
+GST_GL_EXT_END ()
diff --git a/gst-libs/gst/gl/gstglcolorconvert.c b/gst-libs/gst/gl/gstglcolorconvert.c
index f478faa..ed417db 100644
--- a/gst-libs/gst/gl/gstglcolorconvert.c
+++ b/gst-libs/gst/gl/gstglcolorconvert.c
@@ -261,9 +261,9 @@ static const struct shader_templ templ_RGB_to_PLANAR_YUV =
     "    for (int j = 0; j < int(chroma_sampling.y); j++) {\n"
     "      int n = (i+1)*(j+1);\n"
     "      delta.y = float(j);\n"
-    "      vec4 sample = texture2D(tex, (chroma_pos + delta) / unnormalization).%c%c%c%c;\n"
+    "      vec4 s = texture2D(tex, (chroma_pos + delta) / unnormalization).%c%c%c%c;\n"
            /* rolling average */
-    "      uv_texel = (float(n-1) * uv_texel + sample) / float(n);\n"
+    "      uv_texel = (float(n-1) * uv_texel + s) / float(n);\n"
     "    }\n"
     "  }\n"
     "}\n"
@@ -1841,6 +1841,19 @@ _mangle_varying_attribute (const gchar * str, guint shader_type,
 }
 
 static gchar *
+_mangle_texture_2D (const gchar * str)
+{
+  GRegex *regex;
+  gchar *ret;
+
+  regex = g_regex_new ("texture2D", 0, 0, NULL);
+  ret = g_regex_replace_literal (regex, str, -1, 0, "texture", 0, NULL);
+  g_regex_unref (regex);
+
+  return ret;
+}
+
+static gchar *
 _mangle_frag_color_data (const gchar * str)
 {
   GRegex *regex;
@@ -1910,7 +1923,8 @@ _mangle_shader (const gchar * str, guint shader_type, GstGLTextureTarget from,
             && *version >= GST_GLSL_VERSION_150)) {
       tmp2 = _mangle_frag_color_data (tmp);
       g_free (tmp);
-      tmp = tmp2;
+      tmp = _mangle_texture_2D(tmp2);
+      g_free (tmp2);
     }
   }
   return tmp;
diff --git a/gst-libs/gst/gl/gstglshader.c b/gst-libs/gst/gl/gstglshader.c
index 9d96784..9f09236 100644
--- a/gst-libs/gst/gl/gstglshader.c
+++ b/gst-libs/gst/gl/gstglshader.c
@@ -1306,3 +1306,23 @@ gst_gl_shader_bind_attribute_location (GstGLShader * shader, GLuint index,
 
   gl->BindAttribLocation (priv->program_handle, index, name);
 }
+
+void
+gst_gl_shader_bind_frag_data_location (GstGLShader * shader,
+    guint index, const gchar * name)
+{
+  GstGLShaderPrivate *priv;
+  GstGLFuncs *gl;
+
+  g_return_if_fail (shader != NULL);
+  if (!_ensure_program (shader))
+    g_return_if_fail (shader->priv->program_handle);
+  priv = shader->priv;
+  gl = shader->context->gl_vtable;
+  g_return_if_fail (gl->BindFragDataLocation);
+
+  GST_TRACE_OBJECT (shader, "binding program %i frag data \'%s\' location %i",
+      (int) priv->program_handle, name, index);
+
+  gl->BindFragDataLocation (priv->program_handle, index, name);
+}
-- 
1.9.1

