From 4bdd1a21f714d9ac81b257e06c6f37989422b4ff Mon Sep 17 00:00:00 2001
From: Lyon Wang <lyon.wang@nxp.com>
Date: Sat, 18 Feb 2017 18:09:16 +0800
Subject: [PATCH 3/3] gstplayer: add get audio/text sink API

- Add get_audio/text_sink API

Upstream Status:  [i.MX specific]

Signed-off-by: Lyon Wang <lyon.wang@nxp.com>
---
 gst-libs/gst/player/gstplayer.c | 84 +++++++++++++++++++++++++++++++++++++++++
 gst-libs/gst/player/gstplayer.h |  2 +
 2 files changed, 86 insertions(+)

diff --git a/gst-libs/gst/player/gstplayer.c b/gst-libs/gst/player/gstplayer.c
index 0568347..be4c196 100644
--- a/gst-libs/gst/player/gstplayer.c
+++ b/gst-libs/gst/player/gstplayer.c
@@ -4482,6 +4482,90 @@ gst_player_set_text_sink (GstPlayer * self, const gchar * sink_name)
 }
 
 /**
+ * gst_player_get_audio_sink:
+ * @player: #GstPlayer instance
+ *
+ * Returns: actual audio sink element
+ */
+GstElement *
+gst_player_get_audio_sink (GstPlayer * self)
+{
+  GstElement *sink = NULL;
+  GstElement *actual_sink = NULL;
+  GstIteratorResult rc;
+  GstIterator *it;
+  GValue item = { 0, };
+  g_return_val_if_fail (GST_IS_PLAYER (self), NULL);
+
+  g_object_get (G_OBJECT (self->playbin), "audio-sink", &sink, NULL);
+  if (NULL == sink) {
+    GST_WARNING_OBJECT (self, "No audio-sink found");
+    return NULL;
+  }
+  it = gst_bin_iterate_sinks ((GstBin *) sink);
+  do {
+    rc = gst_iterator_next (it, &item);
+    if (rc == GST_ITERATOR_OK) {
+      break;
+    }
+  } while (rc != GST_ITERATOR_DONE);
+
+  g_object_unref (sink);
+  actual_sink = g_value_get_object (&item);
+  g_value_unset (&item);
+  gst_iterator_free (it);
+
+  if (NULL == actual_sink) {
+    GST_WARNING_OBJECT (self, "No auido-sink found");
+    return NULL;
+  }
+
+  return actual_sink;
+}
+
+/**
+ * gst_player_get_text_sink:
+ * @player: #GstPlayer instance
+ *
+ * Returns: actual text sink element
+ */
+GstElement *
+gst_player_get_text_sink (GstPlayer * self)
+{
+  GstElement *sink = NULL;
+  GstElement *actual_sink = NULL;
+  GstIteratorResult rc;
+  GstIterator *it;
+  GValue item = { 0, };
+  g_return_val_if_fail (GST_IS_PLAYER (self), NULL);
+
+  g_object_get (G_OBJECT (self->playbin), "text-sink", &sink, NULL);
+  if (NULL == sink) {
+    GST_WARNING_OBJECT (self, "No text-sink found");
+    return NULL;
+  }
+  it = gst_bin_iterate_sinks ((GstBin *) sink);
+  do {
+    rc = gst_iterator_next (it, &item);
+    if (rc == GST_ITERATOR_OK) {
+      break;
+    }
+  } while (rc != GST_ITERATOR_DONE);
+
+  g_object_unref (sink);
+  actual_sink = g_value_get_object (&item);
+  g_value_unset (&item);
+  gst_iterator_free (it);
+
+  if (NULL == actual_sink) {
+    GST_WARNING_OBJECT (self, "No text-sink found");
+    return NULL;
+  }
+
+  return actual_sink;
+}
+
+/**
  * gst_player_get_video_snapshot:
  * @player: #GstPlayer instance
  * @format: output format of the video snapshot
diff --git a/gst-libs/gst/player/gstplayer.h b/gst-libs/gst/player/gstplayer.h
index abead10..99026aa 100644
--- a/gst-libs/gst/player/gstplayer.h
+++ b/gst-libs/gst/player/gstplayer.h
@@ -226,6 +226,8 @@ gboolean    gst_player_config_get_force_aspect_ratio (const GstStructure * confi
 
 gboolean    gst_player_set_audio_sink (GstPlayer * player, const gchar * sink_name);
 gboolean    gst_player_set_text_sink (GstPlayer * player, const gchar * sink_name);
+GstElement * gst_player_get_audio_sink (GstPlayer * player);
+GstElement * gst_player_get_text_sink (GstPlayer * player);
 
 GstPlayerState  gst_player_get_state (GstPlayer * player);
 
-- 
1.9.1

