From 7e0be329fd4446d751cc951f328bd782ad78616e Mon Sep 17 00:00:00 2001
From: Xianzhong <xianzhong.li@nxp.com>
Date: Thu, 14 May 2020 16:29:42 +0800
Subject: [PATCH 1/3] Add wayland build for vk-gl-cts repo

Yocto SDK toolchain - L5.4 zeus with GCC 9.2

Signed-off-by: Xianzhong <xianzhong.li@nxp.com>
---
 build-wayland-cts.sh | 64 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 64 insertions(+)
 create mode 100755 build-wayland-cts.sh

diff --git a/build-wayland-cts.sh b/build-wayland-cts.sh
new file mode 100755
index 000000000..76af97905
--- /dev/null
+++ b/build-wayland-cts.sh
@@ -0,0 +1,64 @@
+#!/bin/bash
+
+target=$1
+
+if [ -z $1 ]; then
+echo
+echo $0 "yocto_arm|yocto_aarch64"
+echo
+exit 0
+fi
+
+export WORKSPACE=`pwd`
+if [ "$target" = "yocto_arm" ]; then
+    . /opt/fsl-imx-internal-xwayland/5.4-zeus-32/environment-setup-cortexa9t2hf-neon-poky-linux-gnueabi
+    export CFLAGS="${CFLAGS} -mfloat-abi=hard -mfpu=vfp"
+    export CXXFLAGS="${CXXFLAGS} -mfloat-abi=hard -mfpu=vfp"
+    export LDFLAGS="${LDFLAGS} -mfloat-abi=hard -mfpu=vfp"
+elif [ "$target" = "yocto_aarch64" ]; then
+    . /opt/fsl-imx-internal-xwayland/5.4-zeus/environment-setup-aarch64-poky-linux
+fi
+
+export CC="ccache $CC"
+export CXX="ccache $CXX"
+export CPP="ccache $CPP"
+export ROOTFS="$SDKTARGETSYSROOT"
+export ROOTFS_INC=${ROOTFS}/usr/include
+export ROOTFS_LIB=${ROOTFS}/usr/lib
+export NG_CMAKE_GENERATOR="Unix Makefiles"
+
+#disable debug flag to reduce cts binary size
+export CFLAGS=`echo ${CFLAGS} | sed 's/ -g / /g'`
+export CXXFLAGS=`echo ${CXXFLAGS} | sed 's/ -g / /g'`
+
+# -ffp-contract=off, disable gcc float point optimizaton to fix below case failure:
+# dEQP-GLES2.functional.clipping.triangle_vertex.clip_three.clip_neg_x_neg_z_and_pos_x_pos_z_and_neg_x_neg_y_pos_z
+export CFLAGS="${CFLAGS} -Os -ffp-contract=off -DLINUX -fPIC"
+export CXXFLAGS="${CXXFLAGS} ${CFLAGS}"
+export CMAKE_C_FLAGS="${CFLAGS}"
+export CMAKE_STATIC_LINKER_FLAGS="-fPIC"
+export CXXFLAGS="${CXXFLAGS} ${CFLAGS}"
+export CMAKE_CXX_FLAGS="${CXXFLAGS}"
+export CMAKE_C_FLAGS="${CFLAGS}"
+
+if [ -e "${ROOTFS_LIB}/libGLESv2.so" ] && [ -e "${ROOTFS_LIB}/libEGL.so" ]; then
+
+python external/fetch_sources.py
+
+mkdir -p build-es_${target}
+cd build-es_${target}
+cmake .. \
+     -DDEQP_TARGET=wayland \
+     -DCMAKE_BUILD_TYPE=release\
+     -G"${NG_CMAKE_GENERATOR}" \
+     -DCMAKE_INCLUDE_PATH=${ROOTFS_INC} \
+     -DCMAKE_LIBRARY_PATH=${ROOTFS_LIB} \
+     ${NG_CMAKE_PLATFORM_OPT}
+
+make -j8
+
+else
+echo
+echo ERROR: not found found ${ROOTFS_LIB}/libGLESv2.so, please correct ROOTFS setting in $0
+echo
+fi
-- 
2.17.1

